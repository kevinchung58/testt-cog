import { Document } from '@langchain/core/documents';
import { VectorStoreRetriever } from '@langchain/core/vectorstores';
import { Chroma } from '@langchain/community/vectorstores/chroma';
import { GoogleGenerativeAIEmbeddings } from '@langchain/google-genai';
import {
  GEMINI_API_KEY,
  CHROMA_URL,
  CHROMA_COLLECTION_NAME as DEFAULT_COLLECTION_NAME,
  DEFAULT_EMBEDDING_MODEL_NAME // Import new config for embedding model name
} from '../config';

let embeddingsModel: GoogleGenerativeAIEmbeddings | undefined;

function initializeEmbeddingsModel(): GoogleGenerativeAIEmbeddings | undefined {
  if (GEMINI_API_KEY) {
    try {
      const model = new GoogleGenerativeAIEmbeddings({
        apiKey: GEMINI_API_KEY,
        modelName: DEFAULT_EMBEDDING_MODEL_NAME,
      });
      console.log(`GoogleGenerativeAIEmbeddings initialized with model ${DEFAULT_EMBEDDING_MODEL_NAME} for vector-store.ts`);
      return model;
    } catch (error) {
      console.error(`Failed to initialize GoogleGenerativeAIEmbeddings with model ${DEFAULT_EMBEDDING_MODEL_NAME}:`, error);
      return undefined;
    }
  } else {
    console.warn('GEMINI_API_KEY is not set. Vector store operations requiring new embeddings will fail.');
    return undefined;
  }
}

embeddingsModel = initializeEmbeddingsModel();

function getInitializedEmbeddings(): GoogleGenerativeAIEmbeddings {
  if (!embeddingsModel) {
    // Attempt re-initialization if it failed initially and config might have updated (e.g. dynamic env load)
    console.log("Attempting to re-initialize embeddings model in getInitializedEmbeddings...");
    embeddingsModel = initializeEmbeddingsModel();
    if (!embeddingsModel) {
      throw new Error('Embeddings model not initialized and re-initialization failed. GEMINI_API_KEY might be missing or model name is invalid.');
    }
  }
  return embeddingsModel;
}

// Helper function to get a Chroma vector store instance
// This ensures that the Chroma client is configured with the embeddings model.
async function getVectorStore(collectionName: string): Promise<Chroma> {
  const currentEmbeddings = getInitializedEmbeddings();
  if (!CHROMA_URL) {
    throw new Error('CHROMA_URL is not configured. Cannot connect to ChromaDB.');
  }

  // The Chroma constructor takes an Embeddings instance and a config object.
  // The config object includes `url` and `collectionName`.
  const chromaConfig = {
    collectionName: collectionName,
    url: CHROMA_URL,
    // collectionMetadata: { "hnsw:space": "cosine" }, // Optional: if needed, default is L2
  };

  // For adding documents, we usually pass pre-computed embeddings if doing it manually,
  // but LangChain's Chroma class can also handle embedding internally if documents are passed directly.
  // More commonly, vectorStore.addDocuments will use the embeddings object passed to its constructor.

  // Initialize Chroma. This doesn't create the collection yet if it doesn't exist with fromExistingCollection.
  // addDocuments will typically create it if it's not there.
  const vectorStore = new Chroma(currentEmbeddings, chromaConfig);
  console.log(`Chroma vector store instance configured for collection: ${collectionName} at ${CHROMA_URL}`);
  return vectorStore;
}

/**
 * Adds an array of LangChain Documents to the specified Chroma collection.
 * The documents are expected to have `pageContent` and `metadata`.
 * Embeddings will be generated by the `embeddingsModel` for these documents.
 * @param documents - Array of LangChain Documents.
 * @param collectionName - The name of the Chroma collection. Defaults to CHROMA_COLLECTION_NAME from config.
 */
export async function addDocuments(
  documents: Document[],
  collectionName: string = DEFAULT_COLLECTION_NAME
): Promise<void> {
  if (!documents || documents.length === 0) {
    console.log('No documents provided to add.');
    return;
  }
  getInitializedEmbeddings(); // Ensure embeddings model is ready

  const vectorStore = await getVectorStore(collectionName);

  try {
    console.log(`Adding ${documents.length} documents to Chroma collection '${collectionName}'...`);
    // The addDocuments method of the Chroma class will use the embeddings model
    // passed during its instantiation to generate embeddings for the documents.
    await vectorStore.addDocuments(documents);
    console.log(`Successfully added ${documents.length} documents to collection '${collectionName}'.`);
  } catch (error: any) {
    console.error(`Error adding documents to Chroma collection '${collectionName}':`, error.message, error.stack);
    throw new Error(`Failed to add documents to Chroma: ${error.message}`);
  }
}

/**
 * Creates a retriever for the specified Chroma collection.
 * @param collectionName - The name of the Chroma collection. Defaults to CHROMA_COLLECTION_NAME.
 * @param k - The number of documents to retrieve. Defaults to 5.
 * @returns A VectorStoreRetriever instance.
 */
export async function createRetriever(
  collectionName: string = DEFAULT_COLLECTION_NAME,
  k: number = 5
): Promise<VectorStoreRetriever<Chroma>> {
  getInitializedEmbeddings(); // Ensure embeddings model is ready for retriever to function if needed (e.g. query translation)

  const vectorStore = await getVectorStore(collectionName);

  console.log(`Creating retriever for Chroma collection '${collectionName}' with k=${k}.`);
  return vectorStore.asRetriever({ k });
}

console.log('vector-store.ts loaded');
